"use client";

import React from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Form,
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Select,
  SelectTrigger,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";

const schema = z.object({
  plantationName: z.string().min(1, "Plantation name is required"),
  plantationType: z.string().min(1, "Plantation type is required"),
  plantType: z.string().min(1, "Plant type is required"),
  city: z.string().min(1, "City is required"),
  province: z.string().min(1, "Province is required"),
  country: z.string().min(1, "Country is required"),
  plantationLength: z.string().min(1, "Plantation length is required"),
  plantationWidth: z.string().min(1, "Plantation width is required"),
  agreeToTerms: z.boolean().refine((val) => val, "You must agree to the terms"),
});

const PlantationForm = () => {
  const form = useForm({
    resolver: zodResolver(schema),
    defaultValues: {
      plantationName: "",
      plantationType: "",
      plantType: "",
      city: "",
      province: "",
      country: "",
      plantationLength: "",
      plantationWidth: "",
      agreeToTerms: false,
    },
  });

  const onSubmit = (data) => {
    console.log(data);
    form.reset();
  };

  return (
    <div className="w-[992px] mx-auto p-4">
      <div className="mb-8">
        <h1 className="text-h1 font-bold text-center mt-1">
          Let's Get Started
        </h1>
        <p className="text-center text-accent-foreground">
          Add your plantation details to start gsync.
        </p>
      </div>
      <div className="flex justify-center items-center">
        <span className="text-h4 font-semibold mr-6">Plantation (1/3)</span>
        <span className="text-grey ml-2">
          youâ€™re currently using gardener plan.{" "}
          <a href="#" className="text-text underline ml-1">
            Change my plan
          </a>
        </span>
      </div>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <div className="grid grid-cols-2 gap-4 mt-6">
            <div className="max-w-[440px]">
                <div className="space-y-4">
                    <div className="text-h4">General</div>
              <FormField
                control={form.control}
                name="plantationName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel><div className="text-p">Plantation Name</div></FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="Enter plantation name" className="placeholder:text-p" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="plantationType"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel><div className="text-p">Plantation Type</div></FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="Enter plantation type" className="placeholder:text-p" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="plantType"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel><div className="text-p">Plant Type</div></FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="Enter plant type" className="placeholder:text-p" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              </div>
              <div className="mt-8 space-y-4">
              <div className="text-h4">Location</div>
              <FormField
                control={form.control}
                name="city"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel><div className="text-p">City</div></FormLabel>
                    <FormControl>
                      <Select {...field}>
                        <SelectTrigger />
                        <SelectContent>
                          <SelectItem value="city1">City 1</SelectItem>
                          <SelectItem value="city2">City 2</SelectItem>
                          {/* Add more options as needed */}
                        </SelectContent>
                      </Select>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="province"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel><div className="text-p">Province</div></FormLabel>
                    <FormControl>
                      <Select {...field}>
                        <SelectTrigger />
                        <SelectContent>
                          <SelectItem value="province1">Province 1</SelectItem>
                          <SelectItem value="province2">Province 2</SelectItem>
                          {/* Add more options as needed */}
                        </SelectContent>
                      </Select>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
               <FormField
                control={form.control}
                name="country"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel><div className="text-p">Region/Country</div></FormLabel>
                    <FormControl>
                      <Select {...field}>
                        <SelectTrigger />
                        <SelectContent>
                          <SelectItem value="country1">Country 1</SelectItem>
                          <SelectItem value="country2">Country 2</SelectItem>
                          {/* Add more options as needed */}
                        </SelectContent>
                      </Select>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            </div>
            <div className="max-w-[440px]">
                <div className="space-y-4">
            <div className="text-h4">Pricing</div>
              <FormField
                control={form.control}
                name="plantationLength"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel><div className="text-p">Plantation Length</div></FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="Enter plantation length" className="placeholder:text-p" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="plantationWidth"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel><div className="text-p">Plantation Width</div></FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="Enter plantation width" className="placeholder:text-p" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              </div>
              <FormField
                control={form.control}
                name="agreeToTerms"
                render={({ field }) => (
                  <FormItem>
                    <FormControl>
                      <Checkbox {...field} value={field.value.toString()} />
                    </FormControl>
                    <FormLabel>
                      I understand & agree to the terms above
                    </FormLabel>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <div className="text-center">
                <Button type="submit">Add Current Plantation</Button>
              </div>
            </div>
          </div>
        </form>
      </Form>
    </div>
  );
};

export default PlantationForm;
